{"version":3,"sources":["CommandButton.js","Parameter.js","spirofunctions.js","Canvas.js","reportWebVitals.js","index.js"],"names":["buttonTypes","random","buttonText","CommandButton","props","buttonType","onClick","callback","parameterData","text","desc","Parameter","useState","value","stateValue","setValue","type","className","htmlFor","id","onChange","e","target","drawSpiro","radius1","radius2","distance","rotation","pointsPerCurve","canvas","ctx","getContext","origin","x","width","y","height","clearRect","lineWidth","strokeStyle","angleStep","Math","PI","numPoints","gcd","oldPoint","moveTo","angle","parseFloat","radiusDifference","radiusRatio","beginPath","i","newPoint","cos","sin","lineTo","stroke","a","b","Canvas","state","r1","r2","ppc","updateParameters","bind","randomCurve","parameter","this","setState","R","floor","r","d","u","p","document","getElementById","spiroFunctions","console","log","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+NAEMA,EAAY,CAChBC,OAAO,CACLC,WAAW,iBAWAC,MAPf,SAAuBC,GAAQ,IACtBF,EAAcF,EAAYI,EAAMC,YAAhCH,WACP,OACE,wBAAQI,QAASF,EAAMG,SAAvB,SAAkCL,K,OCThCM,EAAc,CAClB,GAAK,CACHC,KAAK,WACLC,KAAK,wBAEP,GAAK,CACHD,KAAK,WACLC,KAAK,yBAEP,SAAW,CACTD,KAAK,WACLC,KAAK,iDAEP,SAAW,CACTD,KAAK,WACLC,KAAK,6BAEP,IAAM,CACJD,KAAK,SACLC,KAAK,qBA2BMC,MAvBf,SAAmBP,GAAQ,IAAD,EACOQ,oBAAS,WACtC,OAAOR,EAAMS,SAFS,mBACjBC,EADiB,KACLC,EADK,OAIHP,EAAcJ,EAAMY,MAAlCP,EAJiB,EAIjBA,KAMP,OAVwB,EAIXC,KAOX,sBAAKO,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,uBAAOC,QAASd,EAAMY,KAAMC,UAAU,iBAAtC,SAAwDR,MAE1D,qBAAKQ,UAAU,QAAf,SACE,uBAAOD,KAAK,OAAOG,GAAIf,EAAMY,KAAMC,UAAU,eAAeG,SAVlE,SAAyBC,GACvBN,EAASM,EAAEC,OAAOT,OAClBT,EAAMG,SAASH,EAAMY,KAAMK,EAAEC,OAAOT,QAQuDA,MAAOC,UCzC/F,SAASS,EAAUC,EAASC,EAASC,EAAUC,EAAUC,EAAgBC,GAC9E,IAAIC,EAAMD,EAAOE,WAAW,MACxBC,EAAS,CACXC,EAAGJ,EAAOK,MAAQ,EAClBC,EAAGN,EAAOO,OAAS,GAGrBN,EAAIO,UAAU,EAAG,EAAGR,EAAOK,MAAOL,EAAOO,QACzCN,EAAIQ,UAAW,EACfR,EAAIS,YAAc,OAClB,IAAIC,EAAY,EAAIC,KAAKC,GAAKd,EAE1Be,EAAYf,GADKH,EAAQmB,EAAIpB,EAAQC,IAGrCoB,EAAU,CACZZ,EAAGD,EAAOC,EAAIT,EAAUC,EAAUC,EAClCS,EAAEH,EAAOG,GAEXL,EAAIgB,OAAOD,EAASZ,EAAEY,EAASV,GAE/B,IAAIY,EAAQC,WAAWrB,GAAYc,KAAKC,GAAK,IACzCO,EAAmBzB,EAAUC,EAC7ByB,EAAcD,EAAiBxB,EACnCK,EAAIqB,YACJ,IAAI,IAAIC,EAAE,EAAGA,GAAGT,EAAWS,IAAI,CAC7BL,GAASP,EACT,IAAIa,EAAW,CACbpB,EAAGD,EAAOC,EAAIgB,EAAmBR,KAAKa,IAAIP,GAASrB,EAAWe,KAAKa,IAAIP,EAAOG,GAC9Ef,EAAGH,EAAOG,EAAIc,EAAmBR,KAAKc,IAAIR,GAASrB,EAAWe,KAAKc,IAAIR,EAAOG,IAGhFpB,EAAI0B,OAAOH,EAASpB,EAAGoB,EAASlB,GAChCU,EAAW,CACTZ,EAAGoB,EAASpB,EACZE,EAAGkB,EAASlB,GAEdL,EAAI2B,UAIR,SAASb,EAAIc,EAAGC,GACd,OAAU,IAANA,EACKD,EAEAd,EAAIe,EAAID,EAAIC,G,ICkCRC,E,kDAxEb,WAAYxD,GAAO,IAAD,8BAChB,cAAMA,IAIRyD,MAAQ,CACJC,GAAI,IACJC,GAAI,IACJrC,SAAU,GACVC,SAAU,GACVqC,IAAI,IARN,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAHH,E,6DAYDE,EAAWvD,GAC1BwD,KAAKC,UAAS,iBACZ,CAACF,UAAWvD,Q,oCAId,IAAI0D,EAAI9B,KAAK+B,MAAM/B,KAAKxC,SAAWwC,KAAK+B,MAAM,MAC1CC,EAAIhC,KAAK+B,MAAM/B,KAAKxC,SAAWwC,KAAK+B,MAAM,MAC1CE,EAAIjC,KAAK+B,MAAM/B,KAAKxC,SAAWwC,KAAK+B,MAAM,MAC1CG,EAAIlC,KAAK+B,MAAM/B,KAAKxC,SAAWwC,KAAK+B,MAAM,MAC1CI,EAAInC,KAAK+B,MAAM/B,KAAKxC,SAAWwC,KAAK+B,MAAM,KAC9CH,KAAKC,UAAS,iBACZ,CACER,GAAIS,EACJR,GAAIU,EACJ/C,SAAUgD,EACV/C,SAAUgD,EACVX,IAAKY,Q,kCAKT,IAAI/C,EAASgD,SAASC,eAAe,cACrCC,EAAyBV,KAAKR,MAAMC,GAAIO,KAAKR,MAAME,GAAIM,KAAKR,MAAMnC,SAAU2C,KAAKR,MAAMlC,SAAU0C,KAAKR,MAAMG,IAAKnC,K,2CAGjHmD,QAAQC,IAAI,SACZZ,KAAKF,gB,0CAGLE,KAAK9C,c,+BAGL,OACE,qBAAKN,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAKE,GAAG,kBAAR,SACE,wBAAQF,UAAU,SAASE,GAAG,aAAae,MAAO,QAASE,OAAQ,cAGvE,sBAAKnB,UAAU,QAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAWD,KAAK,KAAKT,SAAU8D,KAAKJ,iBAAkBpD,MAAOwD,KAAKR,MAAMC,KACxE,cAAC,EAAD,CAAW9C,KAAK,KAAKT,SAAU8D,KAAKJ,iBAAkBpD,MAAOwD,KAAKR,MAAME,KACxE,cAAC,EAAD,CAAW/C,KAAK,WAAWT,SAAU8D,KAAKJ,iBAAkBpD,MAAOwD,KAAKR,MAAMnC,WAC9E,cAAC,EAAD,CAAWV,KAAK,WAAWT,SAAU8D,KAAKJ,iBAAkBpD,MAAOwD,KAAKR,MAAMlC,WAC9E,cAAC,EAAD,CAAWX,KAAK,MAAMT,SAAU8D,KAAKJ,iBAAkBpD,MAAOwD,KAAKR,MAAMG,SAE3E,cAAC,EAAD,CAAe3D,WAAW,SAASE,SAAU8D,KAAKF,0B,GA9DzCe,IAAMC,WCOZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASC,eAAe,SAM1BM,M","file":"static/js/main.66df3e68.chunk.js","sourcesContent":["import React from 'react';\n\nconst buttonTypes={\n  random:{\n    buttonText:\"Random Curve\"\n  }\n}\n\nfunction CommandButton(props) {\n  const {buttonText} = buttonTypes[props.buttonType];\n  return (\n    <button onClick={props.callback}>{buttonText}</button>\n  );\n}\n\nexport default CommandButton;\n","import React, {useState} from 'react';\n\nconst parameterData={\n  'r1':{\n    text:\"Radius 1\",\n    desc:\"Radius of first gear\"\n  },\n  'r2':{\n    text:\"Radius 2\",\n    desc:\"Radius of second gear\"\n  },\n  'distance':{\n    text:\"Distance\",\n    desc:\"Distance of drawing point from center of gear\"\n  },\n  'rotation':{\n    text:\"Rotation\",\n    desc:\"Initial rotation of curve\"\n  },\n  'ppc':{\n    text:\"Points\",\n    desc:\"Points per curve\"\n  }\n}\n\nfunction Parameter(props) {\n  const [stateValue, setValue] = useState(()=>{\n    return props.value;\n  });\n  const {text, desc} = parameterData[props.type];\n\n  function updateParameter(e){\n    setValue(e.target.value);\n    props.callback(props.type, e.target.value);\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <label htmlFor={props.type} className=\"col-form-label\">{text}</label>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" id={props.type} className=\"form-control\" onChange={updateParameter} value={stateValue}/>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default Parameter;\n","export function drawSpiro(radius1, radius2, distance, rotation, pointsPerCurve, canvas) {\r\n  let ctx = canvas.getContext(\"2d\");\r\n  let origin = {\r\n    x: canvas.width / 2,\r\n    y: canvas.height / 2\r\n  }\r\n\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.lineWidth= 1;\r\n  ctx.strokeStyle = \"#000\";\r\n  let angleStep = 2 * Math.PI / pointsPerCurve;\r\n  let numRevolutions = radius2/gcd(radius1,radius2);\r\n  let numPoints = pointsPerCurve * numRevolutions\r\n\r\n  let oldPoint ={\r\n    x: origin.x + radius1 - radius2 + distance,\r\n    y:origin.y\r\n  }\r\n  ctx.moveTo(oldPoint.x,oldPoint.y);\r\n\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = radius1 - radius2;\r\n  let radiusRatio = radiusDifference/radius2;\r\n  ctx.beginPath();\r\n  for(let i=0; i<=numPoints; i++){\r\n    angle += angleStep;\r\n    let newPoint = {\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n      y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n    } \r\n    \r\n    ctx.lineTo(newPoint.x, newPoint.y);\r\n    oldPoint = {\r\n      x: newPoint.x,\r\n      y: newPoint.y\r\n    }\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\nfunction gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}","import React from 'react';\nimport CommandButton from './CommandButton';\nimport Parameter from './Parameter.js';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.randomCurve = this.randomCurve.bind(this);\n  }\n  state = {\n      r1: 100,\n      r2: 100,\n      distance: 50,\n      rotation: 25,\n      ppc:10\n  }\n  updateParameters(parameter, value){\n    this.setState(()=>(\n      {parameter: value})\n    )\n  }\n  randomCurve(){\n    let R = Math.floor(Math.random() * Math.floor(300)) //Radius A 500\n    let r = Math.floor(Math.random() * Math.floor(300)) //Radius B 500\n    let d = Math.floor(Math.random() * Math.floor(300)) //Distance 500\n    let u = Math.floor(Math.random() * Math.floor(360)) //Rotation\n    let p = Math.floor(Math.random() * Math.floor(10)) //Points per curve\n    this.setState(()=>(\n      {\n        r1: R,\n        r2: r,\n        distance: d,\n        rotation: u,\n        ppc: p\n      })\n    )\n  }\n  drawSpiro(){\n    let canvas = document.getElementById(\"mainCanvas\");\n    spiroFunctions.drawSpiro(this.state.r1, this.state.r2, this.state.distance, this.state.rotation, this.state.ppc, canvas);\n  }\n  componentWillMount() {\n    console.log(\"start\");\n    this.randomCurve();\n  }\n  componentDidMount(){\n    this.drawSpiro()\n  }\n  render() { \n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <div id=\"canvasContainer\">\n              <canvas className=\"border\" id=\"mainCanvas\" width={'800px'} height={'600px'}></canvas>\n            </div>\n          </div>\n          <div className=\"col-4\">\n            <div className=\"parameterPanel\">\n              <Parameter type='r1' callback={this.updateParameters} value={this.state.r1}/>\n              <Parameter type='r2' callback={this.updateParameters} value={this.state.r2}/>\n              <Parameter type='distance' callback={this.updateParameters} value={this.state.distance}/>\n              <Parameter type='rotation' callback={this.updateParameters} value={this.state.rotation}/>\n              <Parameter type='ppc' callback={this.updateParameters} value={this.state.ppc}/>\n            </div>\n            <CommandButton buttonType='random' callback={this.randomCurve}/>\n          </div>\n        </div>\n        \n      </div>\n      \n      \n    );\n  }\n}\n \nexport default Canvas;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}