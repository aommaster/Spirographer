{"version":3,"sources":["CommandButton.js","spirofunctions.js","Canvas.js","reportWebVitals.js","index.js"],"names":["buttonTypes","start","buttonText","CommandButton","props","buttonType","id","onClick","callback","randoSpiro","canvas","radius1","radius2","distance","rotation","pointsPerCurve","ctx","getContext","origin","x","width","y","height","clearRect","lineWidth","angleStep","Math","PI","numRevolutions","gcd","numPoints","oldPoint","moveTo","angle","parseFloat","radiusDifference","radiusRatio","beginPath","i","newPoint","cos","sin","lineTo","strokeStyle","stroke","drawSpiro","floor","random","a","b","Canvas","state","console","log","spiroFunctions","document","getElementById","this","handleClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wNAEMA,EAAY,CAChBC,MAAM,CACJC,WAAW,cAcAC,MAVf,SAAuBC,GAAQ,IACtBF,EAAcF,EAAYI,EAAMC,YAAhCH,WACP,OACE,qBAAKI,GAAG,eAAR,SACE,wBAAQC,QAASH,EAAMI,SAAvB,SAAkCN,OCZjC,SAASO,EAAWC,IAQpB,SAAmBC,EAASC,EAASC,EAAUC,EAAUC,EAAgBL,GAC9E,IAAIM,EAAMN,EAAOO,WAAW,MACxBC,EAAS,CACXC,EAAGT,EAAOU,MAAQ,EAClBC,EAAGX,EAAOY,OAAS,GAGrBN,EAAIO,UAAU,EAAG,EAAGb,EAAOU,MAAOV,EAAOY,QACzCN,EAAIQ,UAAW,EACf,IAAIC,EAAY,EAAIC,KAAKC,GAAKZ,EAC1Ba,EAAiBhB,EAAQiB,EAAIlB,EAAQC,GACrCkB,EAAYf,EAAiBa,EAE7BG,EAAU,CACZZ,EAAGD,EAAOC,EAAIR,EAAUC,EAAUC,EAClCQ,EAAEH,EAAOG,GAEXL,EAAIgB,OAAOD,EAASZ,EAAEY,EAASV,GAE/B,IAAIY,EAAQC,WAAWpB,GAAYY,KAAKC,GAAK,IACzCQ,EAAmBxB,EAAUC,EAC7BwB,EAAcD,EAAiBvB,EACnCI,EAAIqB,YACJ,IAAI,IAAIC,EAAE,EAAGA,GAAGR,EAAWQ,IAAI,CAC7BL,GAASR,EACT,IAAIc,EAAW,CACbpB,EAAGD,EAAOC,EAAIgB,EAAmBT,KAAKc,IAAIP,GAASpB,EAAWa,KAAKc,IAAIP,EAAOG,GAC9Ef,EAAGH,EAAOG,EAAIc,EAAmBT,KAAKe,IAAIR,GAASpB,EAAWa,KAAKe,IAAIR,EAAOG,IAGhFpB,EAAI0B,OAAOH,EAASpB,EAAGoB,EAASlB,GAChCL,EAAI2B,YAAc,OAClB3B,EAAI4B,SACJb,EAAW,CACTZ,EAAGoB,EAASpB,EACZE,EAAGkB,EAASlB,IArChBwB,CALQnB,KAAKoB,MAAMpB,KAAKqB,SAAWrB,KAAKoB,MAAM,MACtCpB,KAAKoB,MAAMpB,KAAKqB,SAAWrB,KAAKoB,MAAM,MACtCpB,KAAKoB,MAAMpB,KAAKqB,SAAWrB,KAAKoB,MAAM,MACtCpB,KAAKoB,MAAMpB,KAAKqB,SAAWrB,KAAKoB,MAAM,MACtCpB,KAAKoB,MAAMpB,KAAKqB,SAAWrB,KAAKoB,MAAM,KACrBpC,GA0C3B,SAASmB,EAAImB,EAAGC,GACd,OAAU,IAANA,EACKD,EAEAnB,EAAIoB,EAAID,EAAIC,G,IC7BRC,E,4MAlBbC,MAAQ,G,4DAENC,QAAQC,IAAI,QAEZC,EADaC,SAASC,eAAe,iB,+BAKrC,OACE,sBAAKlD,GAAG,kBAAR,UACE,wBAAQA,GAAG,aAAac,MAAO,SAAUE,OAAQ,WACjD,cAAC,EAAD,CAAejB,WAAW,QAAQG,SAAUiD,KAAKC,qB,GAZpCC,IAAMC,WCQZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.a7d966d3.chunk.js","sourcesContent":["import React from 'react';\n\nconst buttonTypes={\n  start:{\n    buttonText:\"Click Me!\"\n  }\n}\n\nfunction CommandButton(props) {\n  const {buttonText} = buttonTypes[props.buttonType];\n  return (\n    <div id=\"commandPanel\">\n      <button onClick={props.callback}>{buttonText}</button>\n    </div>\n    \n  );\n}\n\nexport default CommandButton;\n","export function randoSpiro(canvas) {\r\n  let R = Math.floor(Math.random() * Math.floor(300)) //Radius A 500\r\n  let r = Math.floor(Math.random() * Math.floor(300)) //Radius B 500\r\n  let d = Math.floor(Math.random() * Math.floor(300)) //Distance 500\r\n  let u = Math.floor(Math.random() * Math.floor(360)) //Rotation\r\n  let p = Math.floor(Math.random() * Math.floor(10)) //Points per curve\r\n  drawSpiro(R, r, d, u, p, canvas);\r\n};\r\nexport function drawSpiro(radius1, radius2, distance, rotation, pointsPerCurve, canvas) {\r\n  let ctx = canvas.getContext(\"2d\");\r\n  let origin = {\r\n    x: canvas.width / 2,\r\n    y: canvas.height / 2\r\n  }\r\n\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctx.lineWidth= 1;\r\n  let angleStep = 2 * Math.PI / pointsPerCurve;\r\n  let numRevolutions = radius2/gcd(radius1,radius2);\r\n  let numPoints = pointsPerCurve * numRevolutions\r\n\r\n  let oldPoint ={\r\n    x: origin.x + radius1 - radius2 + distance,\r\n    y:origin.y\r\n  }\r\n  ctx.moveTo(oldPoint.x,oldPoint.y);\r\n\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = radius1 - radius2;\r\n  let radiusRatio = radiusDifference/radius2;\r\n  ctx.beginPath();\r\n  for(let i=0; i<=numPoints; i++){\r\n    angle += angleStep;\r\n    let newPoint = {\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n      y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n    } \r\n    \r\n    ctx.lineTo(newPoint.x, newPoint.y);\r\n    ctx.strokeStyle = \"#000\";\r\n    ctx.stroke();\r\n    oldPoint = {\r\n      x: newPoint.x,\r\n      y: newPoint.y\r\n    }\r\n  }\r\n}\r\n\r\nfunction gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}","import React from 'react';\nimport CommandButton from './CommandButton';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  state = {  }\n  handleClick(){\n    console.log(\"test\");\n    let canvas = document.getElementById(\"mainCanvas\");\n    spiroFunctions.randoSpiro(canvas);\n    //spiroFunctions.randoSpiro();\n  }\n  render() { \n    return (\n      <div id=\"canvasContainer\">\n        <canvas id=\"mainCanvas\" width={'1000px'} height={'1000px'}></canvas>\n        <CommandButton buttonType='start' callback={this.handleClick}/>\n      </div>\n      \n    );\n  }\n}\n \nexport default Canvas;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}