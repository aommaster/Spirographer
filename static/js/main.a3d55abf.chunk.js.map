{"version":3,"sources":["CommandButton.js","Parameter.js","spirofunctions.js","Metric.js","Spirograph.js","TileButton.js","SpiroTile.js","Canvas.js","reportWebVitals.js","index.js"],"names":["buttonTypes","randomize","buttonText","styles","add","CommandButton","props","buttonType","className","onClick","callback","parameterData","text","desc","max","Parameter","useState","value","stateValue","setValue","type","updateParameter","e","target","parseInt","useEffect","console","log","disabled","htmlFor","id","min","onChange","gcd","a","b","randomParams","r1","Math","floor","random","r2","distance","rotation","ppc","animation","animPlaying","generateSpiroPath","params","origin","SVGPath","angleStep","PI","numPoints","angle","parseFloat","radiusDifference","radiusRatio","oldPoint","x","cos","y","sin","push","i","newPoint","join","Metric","result","spiroFunctions","Spirograph","dragged","setDrag","startClickPos","setStartClickPos","startSpiroPos","setStartSpiroPos","height","width","viewBox","fill","onMouseDown","pageX","pageY","spiroDiv","document","querySelector","selected","style","left","top","onMouseMove","finalPos","Object","assign","onMouseUp","d","path","stroke","strokeWidth","play","name","command","stop","delete","TileButton","tileIndex","SpiroTile","m","re","bounds","minx","miny","maxx","maxy","exec","selection","playing","Canvas","state","curveList","activeCurve","updateParameters","bind","addCurve","randomCurve","drawSpiro","handleClick","changeCurve","animateCurve","stopAnimation","deleteCurve","index","HTMLDivElement","this","window","confirm","animTime","pathObject","length","getTotalLength","baseStyle","strokeDasharray","strokeDashoffset","animationStyle","transition","setTimeout","removeAttribute","parameter","curveArray","modifiedCurve","setState","prevState","splice","drawParams","newSVG","undefined","map","spiro","href","data-bs-toggle","aria-expanded","aria-controls","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a3d55abf.chunk.js","sourcesContent":["import React from 'react';\n\nconst buttonTypes={\n  randomize:{\n    buttonText:\"Randomize Selection\",\n    styles:\"btn btn-primary\"\n  },\n  add:{\n    buttonText:\"Add Curve\",\n    styles:\"btn btn-success\"\n  }\n}\n\nfunction CommandButton(props) {\n  const {buttonText, styles} = buttonTypes[props.buttonType];\n  return (\n    <div className=\"row\">\n      <button className={styles + \" mb-1\"} onClick={props.callback}>{buttonText}</button>\n    </div>\n  );\n}\n\nexport default CommandButton;\n","import React, {useState, useEffect} from 'react';\n\nconst parameterData={\n  'r1':{\n    text:\"Radius 1\",\n    desc:\"Radius of first gear\",\n    max: 300\n  },\n  'r2':{\n    text:\"Radius 2\",\n    desc:\"Radius of second gear\",\n    max: 300,\n  },\n  'distance':{\n    text:\"Distance\",\n    desc:\"Distance of drawing point from center of gear\",\n    max: 300,\n  },\n  'rotation':{\n    text:\"Rotation\",\n    desc:\"Initial rotation of curve\",\n    max: 360,\n  },\n  'ppc':{\n    text:\"Points\",\n    desc:\"Points per curve\",\n    max: 200,\n  },\n  'animation':{\n    text:\"Animation Time\",\n    desc:\"Length of time the draw animation lasts\",\n    max: 60,\n  }\n}\n\nfunction Parameter(props) {\n  const [stateValue, setValue] = useState(props.value);\n  const {text, desc, max} = parameterData[props.type];\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  function updateParameter(e){\n    if(e.target.value > max){\n      e.target.value = max;\n    }\n    if(e.target.value < 0){\n      e.target.value = 0;\n    }\n    setValue(e.target.value);\n    props.callback(props.type, parseInt(e.target.value));\n  }\n  console.log(props.disabled);\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <label htmlFor={props.type + \"Input\"} className={'col-form-label ' + (props.disabled===true ? \"text-muted\": \"\")}>{text}</label>\n        </div>\n        <div className=\"col-4\">\n          <input \n            type=\"number\" \n            id={props.type + \"Input\"} \n            min=\"0\" \n            max={max} \n            className=\"form-control\" \n            onChange={updateParameter} \n            value={stateValue}\n            disabled={props.disabled}/>\n        </div>\n      </div>\n      <div className=\"row\">\n          <input type=\"range\" id={props.type + \"Range\"} min=\"0\" max={max} onChange={updateParameter} value={stateValue} disabled={props.disabled}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Parameter;\n","export function gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}\r\n\r\nexport function randomParams(){\r\n  let R = Math.floor(Math.random() * 300) +1//Radius A 500\r\n  let r = Math.floor(Math.random() * 300) +1//Radius B 500\r\n  let d = Math.floor(Math.random() * 300) +1//Distance 500\r\n  let u = Math.floor(Math.random() * Math.floor(361)) //Rotation only works when PPC is low\r\n  let p = 100 //Points per circle - Standardized at 100 for simple usage\r\n  let params = \r\n    {\r\n      r1: R,\r\n      r2: r,\r\n      distance: d,\r\n      rotation: u,\r\n      ppc: p,\r\n      animation: 5,\r\n      animPlaying: false,\r\n    }\r\n  return params;\r\n}\r\n\r\nexport function generateSpiroPath(params) {\r\n  let {r1, r2, distance, rotation, ppc} = params;\r\n  let origin = {\r\n    x: 400,\r\n    y: 300\r\n  }\r\n\r\n  if (r1 ===0 || r2===0){\r\n    return \"\";\r\n  }\r\n\r\n  let SVGPath = [];\r\n  let angleStep = 2 * Math.PI / ppc;\r\n  let numRevolutions = r2/gcd(r1,r2);\r\n  let numPoints = ppc * numRevolutions\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = r1 - r2;\r\n  let radiusRatio = radiusDifference/r2;\r\n\r\n  let oldPoint ={\r\n    x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n    y:origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n  }\r\n  SVGPath.push(`M${oldPoint.x}`,`${oldPoint.y}`);\r\n\r\n  \r\n  for(let i=0; i<numPoints; i++){\r\n    angle += angleStep;\r\n    let newPoint = {\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n      y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n    } \r\n    \r\n    SVGPath.push(`L${newPoint.x}`,`${newPoint.y}`);\r\n    oldPoint = {\r\n      x: newPoint.x,\r\n      y: newPoint.y\r\n    }\r\n  }\r\n  SVGPath = SVGPath.join(\" \");\r\n  return SVGPath;\r\n}","import React from 'react';\nimport * as spiroFunctions from './spirofunctions';\n\n\nfunction Metric(props) {\n  let result = 0;\n  switch(props.type){\n    case \"GCD\":\n      result = spiroFunctions.gcd(props.params.r1, props.params.r2)\n      break;\n    default:\n      break;\n  }\n  return (\n  <div>{`${props.type}: ${result}`}</div>\n  );\n}\n\nexport default Metric;\n","import React, {useState} from 'react';\n\nfunction Spirograph(props) {\n  const [dragged, setDrag] = useState(()=>{\n    return false;\n  })\n  const [startClickPos, setStartClickPos] = useState(()=>{\n    return {\n      x:0,\n      y:0\n    };\n  })\n  const [startSpiroPos, setStartSpiroPos] = useState(()=>{\n    return {\n      x:0,\n      y:0\n    };\n  })\n  const func1 = (e) =>{\n    setStartClickPos({\n      x:e.pageX,\n      y:e.pageY,\n    })\n    let spiroDiv = document.querySelector(`#canvasContainer .spiro:nth-child(${props.selected})`);\n    setStartSpiroPos({\n      x:!spiroDiv.style.left?0:parseInt(spiroDiv.style.left,10),\n      y:!spiroDiv.style.top?0:parseInt(spiroDiv.style.top,10),\n    })\n    setDrag(true);\n  }\n  const func2 = (e) =>{\n    if(dragged){\n      let spiroDiv =document.querySelector(`#canvasContainer .spiro:nth-child(${props.selected})`);\n      \n      const finalPos = {\n        left: `${e.pageX - startClickPos.x + startSpiroPos.x}px`,\n        top: `${e.pageY-startClickPos.y + startSpiroPos.y}px`\n      }\n      Object.assign(spiroDiv.style, finalPos)\n    }\n  }\n  const func3 = () =>{\n    if(dragged){\n      setDrag(false);\n    }\n  }\n  return (\n    <div className=\"spiro position-absolute\">\n      <svg className=\"overflow-visible\" height=\"800\" width=\"600\" viewBox=\"0 0 800 800\" fill=\"none\" onMouseDown={func1} onMouseMove={func2} onMouseUp={func3}>\n        <path d={`${props.path}`} stroke=\"black\" strokeWidth={\"1\"}/>\n      </svg>\n    </div>\n  );\n}\n\nexport default Spirograph;\n","import React from 'react';\n\nconst buttonTypes={\n  play:{\n    name:\"fa-play text-muted\",\n    command:\"play\"\n  },\n  stop:{\n    name:\"fa-stop text-muted\",\n    command:\"stop\"\n  },\n  delete:{\n    name:\"fa-trash-alt text-danger\",\n    command:\"delete\"\n  }\n}\n\nfunction TileButton(props) {\n  const {name, command} = buttonTypes[props.type];\n  return (\n    <div>\n      <i className={'p-1 fas rounded-3 ' + name} onClick={(e)=>{props.callback(e, props.tileIndex, command)}}></i>\n    </div>\n  );\n}\n\nexport default TileButton;\n","import React from 'react';\nimport TileButton from './TileButton';\n\nfunction SpiroTile(props) {\nvar re = /[a-z](-?[0-9.]*)\\s(-?[0-9.]*)/gi;\nvar m;\nlet bounds ={\n  minx:999,\n  miny:999,\n  maxx:-999,\n  maxy:-999\n}\n  do {\n      m = re.exec(props.path);\n      if (m) {\n          let x = parseFloat(m[1]);\n          let y = parseFloat(m[2]);\n          if(x > bounds.maxx){\n            bounds.maxx = x;\n          }\n          if(x < bounds.minx){\n            bounds.minx = x;\n          }\n          if(y > bounds.maxy){\n            bounds.maxy = y;\n          }\n          if(y < bounds.miny){\n            bounds.miny = y;\n          }\n      }\n  } while (m);\n  return (\n    <div className={\"row border rounded-3 tile \" + (props.selection===props.tileIndex && 'selectedTile')} onClick={(e)=>{props.callback(e, props.tileIndex, \"select\")}}>\n      <div className=\"col-4\">\n        <div className=\"row m-1\">\n          <svg \n            className=\"w-100 h-100 p-1 rounded-3\" \n            viewBox={`${bounds.minx-1} ${bounds.miny-1} ${bounds.maxx-bounds.minx+10} ${bounds.maxy - bounds.miny+10}`} \n            fill=\"none\">\n            <path d={`${props.path}`} stroke=\"black\" strokeWidth={\"1\"}/>\n          </svg>\n        </div>\n      </div>\n      <div className=\"col-8\">\n        <div className=\"row mt-1\">\n          <div className=\"col-8\">{props.name}</div>\n          <div className=\"col-4\">\n            <TileButton type={props.playing?\"stop\": \"play\"} callback={props.callback} tileIndex = {props.tileIndex}/>\n          </div>\n        </div>\n        <div className=\"row mt-2\">\n          <div className=\"col-8\">\n\n          </div>\n          <div className=\"col-4\">\n            <TileButton type=\"delete\" callback={props.callback} tileIndex = {props.tileIndex}/>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default SpiroTile;\n","import React from 'react';\nimport CommandButton from './CommandButton';\nimport Parameter from './Parameter';\nimport Metric from './Metric';\nimport Spirograph from './Spirograph';\nimport SpiroTile from './SpiroTile';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.addCurve = this.addCurve.bind(this);\n    this.randomCurve = this.randomCurve.bind(this);\n    this.drawSpiro = this.drawSpiro.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.changeCurve = this.changeCurve.bind(this);\n    this.animateCurve = this.animateCurve.bind(this);\n    this.stopAnimation = this.stopAnimation.bind(this);\n    this.deleteCurve = this.deleteCurve.bind(this);\n  }\n  state = {\n      curveList: [],\n      activeCurve: 0\n  }\n  handleClick(e,index, command){\n    ;\n    switch (command){\n      case \"select\":\n        if(e.target instanceof HTMLDivElement){\n          this.changeCurve(index);\n        }\n        break;\n      case \"play\":\n        this.animateCurve(index);\n        break;\n      case \"stop\":\n        this.stopAnimation(index);\n        break;\n      case \"delete\":\n        if (window.confirm('Delete curve?')) {\n          this.deleteCurve(index);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  animateCurve(index){\n    this.updateParameters(\"animPlaying\", true);\n    const animTime = this.state.curveList[index].params.animation;\n    const pathObject = document.querySelector(`.spiro:nth-child(${index+1}) svg path`);\n      const length = pathObject.getTotalLength();\n      const baseStyle ={\n        strokeDasharray: `${length}px`,\n        strokeDashoffset: `-${length}px`,\n      }\n      const animationStyle ={\n        strokeDashoffset: 0,\n        transition: `stroke-dashoffset ${animTime}s linear`\n      }\n      Object.assign(pathObject.style, baseStyle);\n      setTimeout(function(){ \n        Object.assign(pathObject.style, animationStyle)\n      }, 200);\n      setTimeout(() =>{\n        pathObject.removeAttribute('style');\n        this.updateParameters(\"animPlaying\", false);\n      },animTime * 1000 + 200)      \n  }\n  stopAnimation(index){\n    const pathObject = document.querySelector(`.spiro:nth-child(${index+1}) svg path`);\n    pathObject.removeAttribute('style');\n    this.updateParameters(\"animPlaying\", false);\n  }\n  updateParameters(parameter, value){\n    let curveArray = [...this.state.curveList];\n    let modifiedCurve = curveArray[this.state.activeCurve];\n    modifiedCurve.params[parameter] = value;\n    modifiedCurve.path =spiroFunctions.generateSpiroPath(modifiedCurve.params);\n    curveArray[this.state.activeCurve] = modifiedCurve;\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n  }\n  addCurve(){\n    let params = spiroFunctions.randomParams();\n    this.drawSpiro(params);\n    this.setState((prevState)=>({\n      activeCurve: prevState.curveList.length-1\n    }))\n  }\n  deleteCurve(index){\n    let curveArray = [...this.state.curveList];\n    curveArray.splice(index,1);\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n    this.changeCurve(null)\n  }\n  changeCurve(index){\n    this.setState({\n      activeCurve:index\n    })\n  }\n  randomCurve(){\n    let randomParams = spiroFunctions.randomParams();\n    let curveArray = [...this.state.curveList];\n    let modifiedCurve = curveArray[this.state.activeCurve];\n    modifiedCurve.params = randomParams;\n    modifiedCurve.path =spiroFunctions.generateSpiroPath(randomParams);\n    curveArray[this.state.activeCurve] = modifiedCurve;\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n  }\n  drawSpiro(drawParams){\n    let newSVG = spiroFunctions.generateSpiroPath(drawParams);\n    this.setState((prevState) => ({\n      curveList: [...prevState.curveList, {'params': drawParams, 'path':newSVG}]\n    }))\n  }\n  componentDidMount(){\n    let randomParams = spiroFunctions.randomParams();\n    this.drawSpiro(randomParams)\n  }\n  render() {\n    var params = {\n      r1: 0,\n      r2: 0,\n      distance: 0,\n      rotation: 0,\n      ppc: 0,\n      animation: 5,\n      animPlaying: false,\n    };\n    if(this.state.curveList[this.state.activeCurve]!== undefined){\n    ({params} = this.state.curveList[this.state.activeCurve]);\n    }\n    return (\n      <div className=\"container vh-100\">\n        <div className=\"row h-100\">\n          <div className=\"col-3\">\n            <div id=\"tileContainer\">\n              {this.state.curveList.map((spiro, index) => \n                <SpiroTile \n                  key={index+1} \n                  name={`Curve ${index+1}`} \n                  path={spiro.path}\n                  tileIndex = {index}\n                  selection={this.state.activeCurve}\n                  callback={this.handleClick}\n                  playing={spiro.params.animPlaying}\n                  />)}\n            </div>\n          </div>\n          <div className=\"col-6\">\n            <div id=\"canvasContainer\" className=\"border overflow-hidden position-relative h-100\">\n                {this.state.curveList.map((spiro, index) => \n                <Spirograph \n                  key={index} \n                  path={spiro.path} \n                  selected={this.state.activeCurve+1}\n                />)}\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <div id=\"parameterPanel\" className=\"bg-light\">\n              <Parameter type='r1' callback={this.updateParameters} value={params.r1} disabled={this.state.activeCurve===null?true:false}/>\n              <Parameter type='r2' callback={this.updateParameters} value={params.r2} disabled={this.state.activeCurve===null?true:false}/>\n              <Parameter type='distance' callback={this.updateParameters} value={params.distance} disabled={this.state.activeCurve===null?true:false}/>\n            </div>\n            <div>\n              <a href=\"#advanced\" data-bs-toggle=\"collapse\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample1\">Advanced Settings</a>            </div>\n            <div id=\"advanced\" className=\"collapse multi-collapse\">\n              <Parameter type='rotation' callback={this.updateParameters} value={params.rotation} disabled={this.state.activeCurve===null?true:false}/>\n              <Parameter type='ppc' callback={this.updateParameters} value={params.ppc} disabled={this.state.activeCurve===null?true:false}/>\n              <Parameter type='animation' callback={this.updateParameters} value={params.animation} disabled={this.state.activeCurve===null?true:false}/>\n              <Metric params={params} type=\"GCD\"/>\n            </div>\n            <div id=\"buttonPanel\" className=\"mt-3\">\n              <CommandButton buttonType='randomize' callback={this.randomCurve}/>\n              <CommandButton buttonType='add' callback={this.addCurve}/>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      \n      \n    );\n  }\n}\n \nexport default Canvas;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}