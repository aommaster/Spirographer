{"version":3,"sources":["CommandButton.js","Parameter.js","Spirograph.js","spirofunctions.js","Canvas.js","reportWebVitals.js","index.js"],"names":["buttonTypes","random","buttonText","draw","CommandButton","props","buttonType","onClick","callback","parameterData","text","desc","Parameter","useState","value","stateValue","setValue","type","updateParameter","e","target","parseInt","useEffect","className","htmlFor","id","onChange","min","max","Spirograph","height","width","viewBox","fill","d","path","stroke","strokeWidth","gcd","a","b","randomParams","r1","Math","floor","r2","distance","rotation","ppc","generateSpiroPath","params","origin","SVGPath","angleStep","PI","numPoints","angle","parseFloat","radiusDifference","radiusRatio","oldPoint","x","cos","y","sin","push","i","newPoint","join","Canvas","state","curveList","activeCurve","updateParameters","bind","randomCurve","drawSpiro","parameter","curveArray","this","modifiedCurve","spiroFunctions","setState","prevState","drawParams","newSVG","undefined","map","spiro","index","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1808d826.chunk.js","sourcesContent":["import React from 'react';\n\nconst buttonTypes={\n  random:{\n    buttonText:\"Random Curve\"\n  },\n  draw:{\n    buttonText:\"Draw Curve\"\n  }\n}\n\nfunction CommandButton(props) {\n  const {buttonText} = buttonTypes[props.buttonType];\n  return (\n    <button onClick={props.callback}>{buttonText}</button>\n  );\n}\n\nexport default CommandButton;\n","import React, {useState, useEffect} from 'react';\n\nconst parameterData={\n  'r1':{\n    text:\"Radius 1\",\n    desc:\"Radius of first gear\"\n  },\n  'r2':{\n    text:\"Radius 2\",\n    desc:\"Radius of second gear\"\n  },\n  'distance':{\n    text:\"Distance\",\n    desc:\"Distance of drawing point from center of gear\"\n  },\n  'rotation':{\n    text:\"Rotation\",\n    desc:\"Initial rotation of curve\"\n  },\n  'ppc':{\n    text:\"Points\",\n    desc:\"Points per curve\"\n  }\n}\n\nfunction Parameter(props) {\n  const [stateValue, setValue] = useState(props.value);\n  const {text, desc} = parameterData[props.type];\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  function updateParameter(e){\n    setValue(e.target.value);\n    props.callback(props.type, parseInt(e.target.value));\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <label htmlFor={props.type + \"Input\"} className=\"col-form-label\">{text}</label>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" id={props.type + \"Input\"} className=\"form-control\" onChange={updateParameter} value={stateValue}/>\n        <input type=\"range\" id={props.type + \"Range\"} min=\"0\" max=\"300\" onChange={updateParameter} value={stateValue}/>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default Parameter;\n","import React from 'react';\n\nfunction Spirograph(props) {\n  return (\n    <div className=\"spiro position-absolute\">\n      <svg height=\"800\" width=\"600\" viewBox=\"0 0 800 800\" fill=\"none\">\n        <path d={`${props.path}`} stroke=\"black\" strokeWidth={\"1\"}/>\n      </svg>\n    </div>\n    \n  );\n}\n\nexport default Spirograph;\n","function gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}\r\n\r\nexport function randomParams(){\r\n  let R = Math.floor(Math.random() * Math.floor(300)) //Radius A 500\r\n  let r = Math.floor(Math.random() * Math.floor(300)) //Radius B 500\r\n  let d = Math.floor(Math.random() * Math.floor(300)) //Distance 500\r\n  let u = Math.floor(Math.random() * Math.floor(360)) //Rotation\r\n  let p = 100 //Points per curve - Standardized at 500 for simple usage\r\n  let params = \r\n    {\r\n      r1: R,\r\n      r2: r,\r\n      distance: d,\r\n      rotation: u,\r\n      ppc: p\r\n    }\r\n  return params;\r\n}\r\n\r\nexport function generateSpiroPath(params) {\r\n  let {r1, r2, distance, rotation, ppc} = params;\r\n  let origin = {\r\n    x: 400,\r\n    y: 300\r\n  }\r\n\r\n  let SVGPath = [];\r\n  let angleStep = 2 * Math.PI / ppc;\r\n  let numRevolutions = r2/gcd(r1,r2);\r\n  let numPoints = ppc * numRevolutions\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = r1 - r2;\r\n  let radiusRatio = radiusDifference/r2;\r\n\r\n  let oldPoint ={\r\n    x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n    y:origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n  }\r\n  SVGPath.push(`M${oldPoint.x}`,`${oldPoint.y}`);\r\n\r\n  \r\n  for(let i=0; i<numPoints; i++){\r\n    angle += angleStep;\r\n    let newPoint = {\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n      y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n    } \r\n    \r\n    SVGPath.push(`L${newPoint.x}`,`${newPoint.y}`);\r\n    oldPoint = {\r\n      x: newPoint.x,\r\n      y: newPoint.y\r\n    }\r\n  }\r\n  SVGPath = SVGPath.join(\" \");\r\n  return SVGPath;\r\n}","import React from 'react';\nimport CommandButton from './CommandButton';\nimport Parameter from './Parameter';\nimport Spirograph from './Spirograph';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.randomCurve = this.randomCurve.bind(this);\n    this.drawSpiro = this.drawSpiro.bind(this);\n  }\n  state = {\n      curveList: [],\n      activeCurve: 0\n  }\n  updateParameters(parameter, value){\n    let curveArray = [...this.state.curveList];\n    let modifiedCurve = curveArray[this.state.activeCurve];\n    modifiedCurve.params[parameter] = value;\n    modifiedCurve.path =spiroFunctions.generateSpiroPath(modifiedCurve.params);\n    curveArray[this.state.activeCurve] = modifiedCurve;\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n  }\n  randomCurve(){\n    let randomParams = spiroFunctions.randomParams();\n    this.drawSpiro(randomParams)\n  }\n  drawSpiro(drawParams){\n    let newSVG = spiroFunctions.generateSpiroPath(drawParams);\n    this.setState((prevState) => ({\n      curveList: [...prevState.curveList, {'params': drawParams, 'path':newSVG}]\n    }))\n  }\n  componentDidMount(){\n    let randomParams = spiroFunctions.randomParams();\n    this.drawSpiro(randomParams)\n  }\n  render() {\n    var params = {\n      r1: 0,\n      r2: 0,\n      distance: 0,\n      rotation: 0,\n      ppc: 0\n    };\n    var path = \"\";\n    \n    if(this.state.curveList[this.state.activeCurve]!== undefined){\n    ({params, path} = this.state.curveList[this.state.activeCurve]);\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <div id=\"canvasContainer\" className=\"border\">\n                {this.state.curveList.map((spiro, index) => <Spirograph key={index} path={spiro.path}/>)}\n            </div>\n          </div>\n          <div className=\"col-4\">\n            <div className=\"parameterPanel\">\n              <Parameter type='r1' callback={this.updateParameters} value={params.r1}/>\n              <Parameter type='r2' callback={this.updateParameters} value={params.r2}/>\n              <Parameter type='distance' callback={this.updateParameters} value={params.distance}/>\n              <Parameter type='rotation' callback={this.updateParameters} value={params.rotation}/>\n              <Parameter type='ppc' callback={this.updateParameters} value={params.ppc}/>\n            </div>\n            <div className=\"buttonPanel\">\n              <CommandButton buttonType='random' callback={this.randomCurve}/>\n              <CommandButton buttonType='draw' callback={this.drawSpiro}/>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      \n      \n    );\n  }\n}\n \nexport default Canvas;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}