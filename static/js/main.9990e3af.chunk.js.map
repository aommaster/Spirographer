{"version":3,"sources":["CommandButton.js","Parameter.js","Spirograph.js","spirofunctions.js","Canvas.js","reportWebVitals.js","index.js"],"names":["buttonTypes","random","buttonText","draw","CommandButton","props","buttonType","onClick","callback","parameterData","text","desc","Parameter","useState","value","stateValue","setValue","type","useEffect","className","htmlFor","id","onChange","e","target","Spirograph","height","width","viewBox","fill","d","path","stroke","strokeWidth","gcd","a","b","drawSpiroSVG","radius1","radius2","distance","rotation","pointsPerCurve","origin","SVGPath","angleStep","Math","PI","numPoints","angle","parseFloat","radiusDifference","radiusRatio","oldPoint","x","cos","y","sin","push","i","newPoint","join","Canvas","state","r1","r2","ppc","SVGList","updateParameters","bind","randomCurve","drawSpiro","parameter","this","setState","R","floor","r","u","p","newSVG","spiroFunctions","prevState","map","spiro","index","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9990e3af.chunk.js","sourcesContent":["import React from 'react';\n\nconst buttonTypes={\n  random:{\n    buttonText:\"Random Curve\"\n  },\n  draw:{\n    buttonText:\"Draw Curve\"\n  }\n}\n\nfunction CommandButton(props) {\n  const {buttonText} = buttonTypes[props.buttonType];\n  return (\n    <button onClick={props.callback}>{buttonText}</button>\n  );\n}\n\nexport default CommandButton;\n","import React, {useState, useEffect} from 'react';\n\nconst parameterData={\n  'r1':{\n    text:\"Radius 1\",\n    desc:\"Radius of first gear\"\n  },\n  'r2':{\n    text:\"Radius 2\",\n    desc:\"Radius of second gear\"\n  },\n  'distance':{\n    text:\"Distance\",\n    desc:\"Distance of drawing point from center of gear\"\n  },\n  'rotation':{\n    text:\"Rotation\",\n    desc:\"Initial rotation of curve\"\n  },\n  'ppc':{\n    text:\"Points\",\n    desc:\"Points per curve\"\n  }\n}\n\nfunction Parameter(props) {\n  const [stateValue, setValue] = useState(props.value);\n  const {text, desc} = parameterData[props.type];\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  function updateParameter(e){\n    setValue(e.target.value);\n    props.callback(props.type, e.target.value);\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <label htmlFor={props.type} className=\"col-form-label\">{text}</label>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" id={props.type} className=\"form-control\" onChange={updateParameter} value={stateValue}/>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default Parameter;\n","import React from 'react';\n\nfunction Spirograph(props) {\n  return (\n    <div className=\"spiro position-absolute\">\n      <svg height=\"800\" width=\"600\" viewBox=\"0 0 800 800\" fill=\"none\">\n        <path d={`${props.path}`} stroke=\"black\" strokeWidth={\"1\"}/>\n      </svg>\n    </div>\n    \n  );\n}\n\nexport default Spirograph;\n","function gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}\r\n\r\nexport function drawSpiroSVG(radius1, radius2, distance, rotation, pointsPerCurve) {\r\n  let origin = {\r\n    x: 400,\r\n    y: 300\r\n  }\r\n\r\n\r\n  let SVGPath = [];\r\n  let angleStep = 2 * Math.PI / pointsPerCurve;\r\n  let numRevolutions = radius2/gcd(radius1,radius2);\r\n  let numPoints = pointsPerCurve * numRevolutions\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = radius1 - radius2;\r\n  let radiusRatio = radiusDifference/radius2;\r\n\r\n  let oldPoint ={\r\n    x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n    y:origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n  }\r\n  SVGPath.push(`M${oldPoint.x}`,`${oldPoint.y}`);\r\n\r\n  \r\n  for(let i=0; i<numPoints; i++){\r\n    angle += angleStep;\r\n    let newPoint = {\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusRatio),\r\n      y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusRatio)\r\n    } \r\n    \r\n    SVGPath.push(`L${newPoint.x}`,`${newPoint.y}`);\r\n    oldPoint = {\r\n      x: newPoint.x,\r\n      y: newPoint.y\r\n    }\r\n  }\r\n  SVGPath = SVGPath.join(\" \");\r\n  return SVGPath;\r\n}","import React from 'react';\nimport CommandButton from './CommandButton';\nimport Parameter from './Parameter';\nimport Spirograph from './Spirograph';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.randomCurve = this.randomCurve.bind(this);\n    this.drawSpiro = this.drawSpiro.bind(this);\n  }\n  state = {\n      r1: 100,\n      r2: 100,\n      distance: 50,\n      rotation: 25,\n      ppc:10,\n      SVGList: [],\n  }\n  updateParameters(parameter, value){\n    this.setState(()=>(\n      {[parameter]: value})\n    )\n  }\n  randomCurve(){\n    let R = Math.floor(Math.random() * Math.floor(300)) //Radius A 500\n    let r = Math.floor(Math.random() * Math.floor(300)) //Radius B 500\n    let d = Math.floor(Math.random() * Math.floor(300)) //Distance 500\n    let u = Math.floor(Math.random() * Math.floor(360)) //Rotation\n    let p = Math.floor(Math.random() * Math.floor(10)) //Points per curve\n    this.setState(()=>(\n      {\n        r1: R,\n        r2: r,\n        distance: d,\n        rotation: u,\n        ppc: p\n      })\n    )\n  }\n  drawSpiro(){\n    let newSVG = spiroFunctions.drawSpiroSVG(this.state.r1, this.state.r2, this.state.distance, this.state.rotation, this.state.ppc);\n    this.setState((prevState) => ({\n      SVGList: [...prevState.SVGList, newSVG]\n    }))\n  }\n  componentWillMount() {\n    this.randomCurve();\n  }\n  componentDidMount(){\n    this.drawSpiro()\n  }\n  render() { \n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <div id=\"canvasContainer\" className=\"border\">\n                {this.state.SVGList.map((spiro, index) => <Spirograph key={index} path={spiro}/>)}\n            </div>\n          </div>\n          <div className=\"col-4\">\n            <div className=\"parameterPanel\">\n              <Parameter type='r1' callback={this.updateParameters} value={this.state.r1}/>\n              <Parameter type='r2' callback={this.updateParameters} value={this.state.r2}/>\n              <Parameter type='distance' callback={this.updateParameters} value={this.state.distance}/>\n              <Parameter type='rotation' callback={this.updateParameters} value={this.state.rotation}/>\n              <Parameter type='ppc' callback={this.updateParameters} value={this.state.ppc}/>\n            </div>\n            <div className=\"buttonPanel\">\n              <CommandButton buttonType='random' callback={this.randomCurve}/>\n              <CommandButton buttonType='draw' callback={this.drawSpiro}/>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      \n      \n    );\n  }\n}\n \nexport default Canvas;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Canvas/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}