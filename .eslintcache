[{"E:\\Programming\\React Practice\\spirographer\\src\\index.js":"1","E:\\Programming\\React Practice\\spirographer\\src\\reportWebVitals.js":"2","E:\\Programming\\React Practice\\spirographer\\src\\Canvas.js":"3","E:\\Programming\\React Practice\\spirographer\\src\\CommandButton.js":"4","E:\\Programming\\React Practice\\spirographer\\src\\spirofunctions.js":"5","E:\\Programming\\React Practice\\spirographer\\src\\Parameter.js":"6","E:\\Programming\\React Practice\\spirographer\\src\\Spirograph.js":"7","E:\\Programming\\React Practice\\spirographer\\src\\SpiroTile.js":"8"},{"size":508,"mtime":1607938919164,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":3701,"mtime":1607961936729,"results":"12","hashOfConfig":"10"},{"size":336,"mtime":1607954662003,"results":"13","hashOfConfig":"10"},{"size":1794,"mtime":1607955179089,"results":"14","hashOfConfig":"10"},{"size":1280,"mtime":1607940897888,"results":"15","hashOfConfig":"10"},{"size":318,"mtime":1607961638915,"results":"16","hashOfConfig":"10"},{"size":1190,"mtime":1607960962922,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"17g1iyr",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"E:\\Programming\\React Practice\\spirographer\\src\\index.js",[],["38","39"],"E:\\Programming\\React Practice\\spirographer\\src\\reportWebVitals.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\Canvas.js",["40"],"import React from 'react';\nimport CommandButton from './CommandButton';\nimport Parameter from './Parameter';\nimport Spirograph from './Spirograph';\nimport SpiroTile from './SpiroTile';\nimport * as spiroFunctions from './spirofunctions';\n\nclass Canvas extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateParameters = this.updateParameters.bind(this);\n    this.addCurve = this.addCurve.bind(this);\n    this.randomCurve = this.randomCurve.bind(this);\n    this.drawSpiro = this.drawSpiro.bind(this);\n  }\n  state = {\n      curveList: [],\n      activeCurve: 0\n  }\n  updateParameters(parameter, value){\n    let curveArray = [...this.state.curveList];\n    let modifiedCurve = curveArray[this.state.activeCurve];\n    modifiedCurve.params[parameter] = value;\n    modifiedCurve.path =spiroFunctions.generateSpiroPath(modifiedCurve.params);\n    curveArray[this.state.activeCurve] = modifiedCurve;\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n  }\n  addCurve(){\n    let params = spiroFunctions.randomParams();\n    this.drawSpiro(params);\n    this.setState((prevState)=>({\n      activeCurve: prevState.activeCurve+1\n    }))\n  }\n  randomCurve(){\n    let randomParams = spiroFunctions.randomParams();\n    let curveArray = [...this.state.curveList];\n    let modifiedCurve = curveArray[this.state.activeCurve];\n    modifiedCurve.params = randomParams;\n    modifiedCurve.path =spiroFunctions.generateSpiroPath(randomParams);\n    curveArray[this.state.activeCurve] = modifiedCurve;\n    this.setState((prevState)=>({\n      curveList: curveArray\n    }))\n  }\n  drawSpiro(drawParams){\n    let newSVG = spiroFunctions.generateSpiroPath(drawParams);\n    this.setState((prevState) => ({\n      curveList: [...prevState.curveList, {'params': drawParams, 'path':newSVG}]\n    }))\n  }\n  componentDidMount(){\n    let randomParams = spiroFunctions.randomParams();\n    this.drawSpiro(randomParams)\n  }\n  render() {\n    var params = {\n      r1: 0,\n      r2: 0,\n      distance: 0,\n      rotation: 0,\n      ppc: 0\n    };\n    var path = \"\";\n    \n    if(this.state.curveList[this.state.activeCurve]!== undefined){\n    ({params, path} = this.state.curveList[this.state.activeCurve]);\n    }\n    return (\n      <div className=\"container vh-100\">\n        <div className=\"row h-100\">\n          <div className=\"col-3\">\n            <div id=\"tileContainer\">\n              {this.state.curveList.map((spiro, index) => <SpiroTile key={index+1} name={`Curve ${index}`} path={spiro.path}/>)}\n            </div>\n          </div>\n          <div className=\"col-6\">\n            <div id=\"canvasContainer\" className=\"border overflow-hidden position-relative h-100\">\n                {this.state.curveList.map((spiro, index) => <Spirograph key={index} path={spiro.path}/>)}\n            </div>\n          </div>\n          <div className=\"col-3\">\n            <div className=\"parameterPanel bg-light ml-2\">\n              <Parameter type='r1' callback={this.updateParameters} value={params.r1}/>\n              <Parameter type='r2' callback={this.updateParameters} value={params.r2}/>\n              <Parameter type='distance' callback={this.updateParameters} value={params.distance}/>\n              <Parameter type='rotation' callback={this.updateParameters} value={params.rotation}/>\n              <Parameter type='ppc' callback={this.updateParameters} value={params.ppc}/>\n            </div>\n            <div className=\"buttonPanel\">\n              <CommandButton buttonType='randomize' callback={this.randomCurve}/>\n              <CommandButton buttonType='add' callback={this.addCurve}/>\n            </div>\n          </div>\n        </div>\n        \n      </div>\n      \n      \n    );\n  }\n}\n \nexport default Canvas;","E:\\Programming\\React Practice\\spirographer\\src\\CommandButton.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\spirofunctions.js",[],["41","42"],"E:\\Programming\\React Practice\\spirographer\\src\\Parameter.js",["43"],"import React, {useState, useEffect} from 'react';\n\nconst parameterData={\n  'r1':{\n    text:\"Radius 1\",\n    desc:\"Radius of first gear\"\n  },\n  'r2':{\n    text:\"Radius 2\",\n    desc:\"Radius of second gear\"\n  },\n  'distance':{\n    text:\"Distance\",\n    desc:\"Distance of drawing point from center of gear\"\n  },\n  'rotation':{\n    text:\"Rotation\",\n    desc:\"Initial rotation of curve\"\n  },\n  'ppc':{\n    text:\"Points\",\n    desc:\"Points per curve\"\n  }\n}\n\nfunction Parameter(props) {\n  const [stateValue, setValue] = useState(props.value);\n  const {text, desc} = parameterData[props.type];\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  function updateParameter(e){\n    setValue(e.target.value);\n    props.callback(props.type, parseInt(e.target.value));\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <label htmlFor={props.type + \"Input\"} className=\"col-form-label\">{text}</label>\n      </div>\n      <div className=\"col-3\">\n        <input type=\"text\" id={props.type + \"Input\"} className=\"form-control\" onChange={updateParameter} value={stateValue}/>\n        <input type=\"range\" id={props.type + \"Range\"} min=\"0\" max=\"300\" onChange={updateParameter} value={stateValue}/>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default Parameter;\n","E:\\Programming\\React Practice\\spirographer\\src\\Spirograph.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\SpiroTile.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":69,"column":15,"nodeType":"50","messageId":"51","endLine":69,"endColumn":19},{"ruleId":"44","replacedBy":"52"},{"ruleId":"46","replacedBy":"53"},{"ruleId":"48","severity":1,"message":"54","line":28,"column":16,"nodeType":"50","messageId":"51","endLine":28,"endColumn":20},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'path' is assigned a value but never used.","Identifier","unusedVar",["55"],["56"],"'desc' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]