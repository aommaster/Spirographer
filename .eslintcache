[{"E:\\Programming\\React Practice\\spirographer\\src\\index.js":"1","E:\\Programming\\React Practice\\spirographer\\src\\reportWebVitals.js":"2","E:\\Programming\\React Practice\\spirographer\\src\\Canvas.js":"3","E:\\Programming\\React Practice\\spirographer\\src\\CommandButton.js":"4","E:\\Programming\\React Practice\\spirographer\\src\\spirofunctions.js":"5","E:\\Programming\\React Practice\\spirographer\\src\\Parameter.js":"6","E:\\Programming\\React Practice\\spirographer\\src\\Spirograph.js":"7","E:\\Programming\\React Practice\\spirographer\\src\\SpiroTile.js":"8","E:\\Programming\\React Practice\\spirographer\\src\\TileButton.js":"9","E:\\Programming\\React Practice\\spirographer\\src\\Metric.js":"10","E:\\Programming\\React Practice\\spirographer\\src\\CurveParameter.js":"11","E:\\Programming\\React Practice\\spirographer\\src\\ColorParameter.js":"12"},{"size":508,"mtime":1607938919164,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":8342,"mtime":1608195205476,"results":"16","hashOfConfig":"14"},{"size":550,"mtime":1608133450369,"results":"17","hashOfConfig":"14"},{"size":3155,"mtime":1608195044803,"results":"18","hashOfConfig":"14"},{"size":2317,"mtime":1608194099793,"results":"19","hashOfConfig":"14"},{"size":2289,"mtime":1608194006932,"results":"20","hashOfConfig":"14"},{"size":1808,"mtime":1608193822722,"results":"21","hashOfConfig":"14"},{"size":524,"mtime":1608132314519,"results":"22","hashOfConfig":"14"},{"size":357,"mtime":1608048267075,"results":"23","hashOfConfig":"14"},{"size":933,"mtime":1608194693197,"results":"24","hashOfConfig":"14"},{"size":386,"mtime":1608194948679,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"17g1iyr",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"E:\\Programming\\React Practice\\spirographer\\src\\index.js",[],["53","54"],"E:\\Programming\\React Practice\\spirographer\\src\\reportWebVitals.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\Canvas.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\CommandButton.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\spirofunctions.js",["55"],"export function gcd(a, b) {\r\n  if (b === 0)\r\n    return a;\r\n  else\r\n    return gcd(b, (a % b));\r\n}\r\n\r\nexport function randomParams(){\r\n  let R = Math.floor(Math.random() * 300) +1;//Radius A 500\r\n  let r = Math.floor(Math.random() * 300) +1;//Radius B 500\r\n  let d = Math.floor(Math.random() * 300) +1;//Distance 500\r\n  let u = Math.floor(Math.random() * Math.floor(361)); //Rotation only works when PPC is low\r\n  let p = 100; //Points per circle - Standardized at 100 for simple usage\r\n  let c =  Math.random() < 0.5?\"epi\":\"hypo\" //Curve type;\r\n  let s = 1 //Scale;\r\n  let params = \r\n    {\r\n      r1: R,\r\n      r2: r,\r\n      distance: d,\r\n      rotation: u,\r\n      ppc: p,\r\n      animation: 5,\r\n      animPlaying: false,\r\n      curveType: c,\r\n      scale: 100,\r\n      color:'#010101', //Not exactly black because Windows color picker is bugged and won't trigger onChange events\r\n      stroke: 10,\r\n    }\r\n  return params;\r\n}\r\n\r\nexport function generateSpiroPath(params) {\r\n  let {r1, r2, distance, rotation, ppc, curveType, scale} = params;\r\n  let origin = {\r\n    x: 400,\r\n    y: 300\r\n  }\r\n\r\n  scale = scale / 100\r\n\r\n  if (r1 ===0 || r2===0){\r\n    return \"\";\r\n  }\r\n\r\n  let SVGPath = [];\r\n  let angleStep = 2 * Math.PI / ppc;\r\n  let numRevolutions = r2/gcd(r1,r2);\r\n  let numPoints = ppc * numRevolutions\r\n  let angle = parseFloat(rotation) * Math.PI / 180;\r\n  let radiusDifference = r1 - r2;\r\n  let radiusSum = r1 + r2;\r\n  let radiusDifferenceRatio = radiusDifference/r2;\r\n  let radiusSumRatio = radiusDifference/r2;\r\n\r\n  \r\n  if(curveType===\"hypo\"){\r\n    let oldPoint ={\r\n      x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusDifferenceRatio),\r\n      y:origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusDifferenceRatio)\r\n    }\r\n    SVGPath.push(`M${scale * oldPoint.x}`,`${scale * oldPoint.y}`);\r\n    for(let i=0; i<numPoints; i++){\r\n      angle += angleStep;\r\n      let newPoint = {\r\n        x: origin.x + radiusDifference * Math.cos(angle) + distance * Math.cos(angle* radiusDifferenceRatio),\r\n        y: origin.y + radiusDifference * Math.sin(angle) - distance * Math.sin(angle* radiusDifferenceRatio)\r\n      } \r\n      \r\n      SVGPath.push(`L${scale * newPoint.x}`,`${scale * newPoint.y}`);\r\n      oldPoint = {\r\n        x: newPoint.x,\r\n        y: newPoint.y\r\n      }\r\n    }\r\n  }\r\n  else{\r\n    let oldPoint ={\r\n      x: origin.x + radiusSum * Math.cos(angle) - distance * Math.cos(angle* radiusSumRatio),\r\n      y:origin.y + radiusSum * Math.sin(angle) - distance * Math.sin(angle* radiusSumRatio)\r\n    }\r\n    SVGPath.push(`M${scale * oldPoint.x}`,`${scale * oldPoint.y}`);\r\n    for(let i=0; i<numPoints; i++){\r\n      angle += angleStep;\r\n      let newPoint = {\r\n        x: origin.x + radiusSum * Math.cos(angle) - distance * Math.cos(angle* radiusSumRatio),\r\n        y: origin.y + radiusSum * Math.sin(angle) - distance * Math.sin(angle* radiusSumRatio)\r\n      } \r\n      \r\n      SVGPath.push(`L${scale * newPoint.x}`,`${scale * newPoint.y}`);\r\n      oldPoint = {\r\n        x: newPoint.x,\r\n        y: newPoint.y\r\n      }\r\n    }\r\n  }\r\n  SVGPath = SVGPath.join(\" \");\r\n  return SVGPath;\r\n}","E:\\Programming\\React Practice\\spirographer\\src\\Parameter.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\Spirograph.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\SpiroTile.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\TileButton.js",[],["56","57"],"E:\\Programming\\React Practice\\spirographer\\src\\Metric.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\CurveParameter.js",[],"E:\\Programming\\React Practice\\spirographer\\src\\ColorParameter.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":15,"column":7,"nodeType":"64","messageId":"65","endLine":15,"endColumn":8},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'s' is assigned a value but never used.","Identifier","unusedVar",["68"],["69"],"no-global-assign","no-unsafe-negation"]